"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DependencyCollection = void 0;
const Dictionary_1 = require("../Collections/Dictionary");
const List_1 = require("../Collections/List");
const PropertyDictionary_1 = require("../Collections/PropertyDictionary");
/**
 * Represents a set of dependencies.
 */
class DependencyCollection {
    /**
     * Initializes a new instance of the `DependencyCollection` class.
     *
     * @param collection
     * The base collection.
     */
    constructor(collection) {
        var _a;
        this.Dependencies = this.LoadDependencyDictionary(collection === null || collection === void 0 ? void 0 : collection.dependencies);
        this.DevelpomentDependencies = this.LoadDependencyDictionary(collection === null || collection === void 0 ? void 0 : collection.devDependencies);
        this.PeerDependencies = this.LoadDependencyDictionary(collection === null || collection === void 0 ? void 0 : collection.peerDependencies);
        this.OptionalDependencies = this.LoadDependencyDictionary(collection === null || collection === void 0 ? void 0 : collection.optionalDependencies);
        this.BundledDependencies = this.LoadDependencyList((_a = collection === null || collection === void 0 ? void 0 : collection.bundledDependencies) !== null && _a !== void 0 ? _a : []);
    }
    /**
     * @inheritdoc
     */
    get AllDependencies() {
        let result = new Dictionary_1.Dictionary();
        result.AddRange(this.Dependencies);
        result.AddRange(this.DevelpomentDependencies);
        result.AddRange(this.OptionalDependencies);
        return result;
    }
    /**
     * @inheritdoc
     *
     * @param collection
     * The collection to register.
     *
     * @param overwrite
     * A value indicating whether existing dependencies should be overwritten.
     */
    Register(collection, overwrite) {
        let keys;
        keys = [
            "Dependencies",
            "DevelpomentDependencies",
            "PeerDependencies",
            "OptionalDependencies"
        ];
        for (let key of keys) {
            if (overwrite !== null && overwrite !== undefined) {
                let collectionToMutate = overwrite ? this : collection;
                for (let dependency of collection[key].Entries) {
                    if (this[key].Has(dependency[0])) {
                        collectionToMutate[key].Remove(dependency[0]);
                    }
                }
            }
            this[key].AddRange(collection[key]);
        }
        for (let dependency of collection.BundledDependencies.Values) {
            if (!this.BundledDependencies.Values.includes(dependency)) {
                this.BundledDependencies.Add(dependency);
            }
        }
    }
    /**
     * Clears all dependencies from the collection.
     */
    Clear() {
        let sets = [
            this.Dependencies,
            this.DevelpomentDependencies,
            this.PeerDependencies,
            this.OptionalDependencies,
            this.BundledDependencies
        ];
        for (let set of sets) {
            set.Clear();
        }
    }
    /**
     * Loads a dictionary which contains dependencies and corresponding versions.
     *
     * @param source
     * The object which contains the dependencies to load.
     *
     * @returns
     * The dependency-dictionary.
     */
    LoadDependencyDictionary(source) {
        return new PropertyDictionary_1.PropertyDictionary(source);
    }
    /**
     * Loads a list of dependencies.
     *
     * @param source
     * A set of dependencies to load.
     *
     * @returns
     * The newly created dependency-list.
     */
    LoadDependencyList(source) {
        return new List_1.List(source);
    }
}
exports.DependencyCollection = DependencyCollection;
//# sourceMappingURL=DependencyCollection.js.map