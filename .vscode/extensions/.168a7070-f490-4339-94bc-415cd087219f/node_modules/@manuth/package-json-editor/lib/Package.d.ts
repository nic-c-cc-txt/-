import { Dictionary } from "./Collections/Dictionary";
import { List } from "./Collections/List";
import { GenerationLogic } from "./GenerationLogic";
import { IPackageJSON } from "./IPackageJSON";
import { IPackageMetadata } from "./IPackageMetadata";
import { LoadLogic } from "./LoadLogic";
import { BugInfo } from "./Management/BugInfo";
import { DependencyCollection } from "./Management/DependencyCollection";
import { IBinCollection } from "./Management/IBinCollection";
import { IDependencyCollection } from "./Management/IDependencyCollection";
import { IDependencyCollectionOptions } from "./Management/IDependencyCollectionOptions";
import { IDirectoryStructure } from "./Management/IDirectoryStructure";
import { IPerson } from "./Management/IPerson";
import { IRepository } from "./Management/IRepository";
import { IShimCollection } from "./Management/IShimCollection";
import { Person } from "./Management/Person";
import { JSONObjectBase } from "./Utilities/JSONObjectBase";
/**
 * Represents a package.
 */
export declare class Package extends JSONObjectBase<IPackageJSON> implements IDependencyCollection {
    /**
     * Gets or sets name of the package-file.
     */
    FileName: string;
    /**
     * Gets or sets the name of the package.
     */
    Name: string;
    /**
     * Gets or sets the version of the package.
     */
    Version: string;
    /**
     * Gets or sets a value indicating whether the package is private.
     */
    Private: boolean;
    /**
     * Gets or sets the descrption of the package.
     */
    Description: string;
    /**
     * Gets or sets the author of the package.
     */
    Author: Person;
    /**
     * Gets or sets the maintainers of the package.
     */
    Maintainers: Person[];
    /**
     * Gets or sets the contributors of the package.
     */
    Contributors: Person[];
    /**
     * Gets or sets the license of the package.
     */
    License: string;
    /**
     * Gets or sets the keywords of the package.
     */
    Keywords: string[];
    /**
     * Gets or sets a set of engines which are required for running the package.
     */
    Engines: Dictionary<string, string>;
    /**
     * Gets or sets the operating-systems supported by this package.
     */
    OS: string[];
    /**
     * Gets or sets the CPU architectures supported by this package.
     */
    CPU: string[];
    /**
     * Gets or sets the primary entry point of the program.
     */
    Main: string;
    /**
     * Gets or sets the path to the bundlet declaration file.
     */
    Types: string;
    /**
     * Gets or sets a hint to javascript bundlers for packaging modules for client side use.
     */
    Browser: string | IShimCollection;
    /**
     * Gets or sets a set of executables to add to `PATH`.
     */
    Binaries: string | IBinCollection;
    /**
     * Gets or sets filenames to put in place for the `man` program to find.
     */
    Manuals: string | string[];
    /**
     * Gets or sets the files to include into the package.
     */
    Files: string[];
    /**
     * Gets or sets the directory-structure of the package.
     */
    Directories: IDirectoryStructure;
    /**
     * Gets or sets the homepage.
     */
    Homepage: string;
    /**
     * Gets or sets the repository of the package.
     */
    Repository: string | IRepository;
    /**
     * Gets or sets links for reporting bugs.
     */
    Bugs: BugInfo;
    /**
     * Gets or sets a set of persistent configurations.
     */
    Config: Record<string, any>;
    /**
     * Gets or sets the npm configuration to use while publishing.
     */
    PublishConfig: Record<string, any>;
    /**
     * Gets or sets of script-commands for the package.
     */
    Scripts: Dictionary<string, string>;
    /**
     * Gets or sets the dependencies of the package.
     */
    DependencyCollection: DependencyCollection;
    /**
     * Gets or sets a set of additional properties.
     */
    AdditionalProperties: Dictionary<string, unknown>;
    /**
     * The generation-logic for the properties.
     */
    private generationLogics;
    /**
     * Initializes a new instance of the `Package` class.
     */
    constructor();
    /**
     * Initializes a new instance of the `Package` class based on an existing `package.json`-file.
     *
     * @param path
     * The path to the `package.json`-file to load.
     */
    constructor(path: string);
    /**
     * Initializes a new instance of the `Package` class.
     *
     * @param metadata
     * The metadata of the package.
     */
    constructor(metadata: IPackageMetadata | IPackageJSON);
    /**
     * Initializes a new instance of the `Package`.
     *
     * @param path
     * The path to the `package.json` file.
     *
     * @param metadata
     * The metadata of the package.
     */
    constructor(path: string, metadata: IPackageMetadata | IPackageJSON);
    /**
     * @inheritdoc
     */
    get Dependencies(): Dictionary<string, string>;
    /**
     * @inheritdoc
     */
    get DevelpomentDependencies(): Dictionary<string, string>;
    /**
     * @inheritdoc
     */
    get PeerDependencies(): Dictionary<string, string>;
    /**
     * @inheritdoc
     */
    get OptionalDependencies(): Dictionary<string, string>;
    /**
     * @inheritdoc
     */
    get BundledDependencies(): List<string>;
    /**
     * @inheritdoc
     */
    get AllDependencies(): Dictionary<string, string>;
    /**
     * Gets the default values for the options.
     */
    protected get Defaults(): Dictionary<keyof IPackageMetadata, any>;
    /**
     * Gets the mapping from the `IPackageMetadata`-properties to the `Package` properties.
     */
    protected get PropertyMap(): Map<keyof IPackageMetadata, keyof Package>;
    /**
     * Gets the load-logic for the properties.
     */
    protected get LoadLogics(): Map<keyof IPackageMetadata, LoadLogic>;
    /**
     * Gets the generation-logic for the properties.
     */
    get GenerationLogics(): Map<keyof IPackageMetadata, GenerationLogic>;
    /**
     * @inheritdoc
     *
     * @param collection
     * The collection to register.
     *
     * @param overwrite
     * A value indicating whether existing dependencies should be overwritten.
     */
    Register(collection: IDependencyCollection, overwrite?: boolean): void;
    /**
     * Normalizes the package-metadata.
     */
    Normalize(): Promise<void>;
    /**
     * Gets a json-object representing this package.
     *
     * @returns
     * A json-object representing this package.
     */
    ToJSON(): IPackageJSON;
    /**
     * Loads package-metadata.
     *
     * @param metadata
     * The matadata to load.
     */
    protected LoadMetadata(metadata: IPackageJSON): void;
    /**
     * Loads an object.
     *
     * @param object
     * The object to load.
     *
     * @returns
     * The loaded object.
     */
    protected LoadObject(object: any): any;
    /**
     * Loads a dictionary from an object.
     *
     * @param collection
     * The collection to load.
     *
     * @returns
     * The loaded dictionary.
     */
    protected LoadDictionary<T>(collection: T): Dictionary<keyof T, T[keyof T]>;
    /**
     * Loads a dependency-collection.
     *
     * @param collection
     * The dependency-collection to load.
     *
     * @returns
     * The newly created dependency-collection.
     */
    protected LoadDependencyCollection(collection: IDependencyCollectionOptions): DependencyCollection;
    /**
     * Loads a person from an object.
     *
     * @param person
     * The person to load.
     *
     * @returns
     * The loaded person.
     */
    protected LoadPerson(person: IPerson | string): Person;
    /**
     * Loads a set of persons from an object.
     *
     * @param personList
     * The person-list to load.
     *
     * @returns
     * The loaded list.
     */
    protected LoadPersonList(personList: Array<IPerson | string>): Person[];
}
