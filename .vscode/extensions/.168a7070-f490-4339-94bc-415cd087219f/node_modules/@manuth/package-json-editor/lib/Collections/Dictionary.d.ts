import { JSONObjectBase } from "../Utilities/JSONObjectBase";
import { Collection } from "./Collection";
import { IDictionary } from "./IDictionary";
/**
 * Provides the functionality to store key-value pairs.
 *
 * @template TKey
 * The type of the keys of the dictionary.
 *
 * @template TValue
 * The type of the values of the dictionary.
 */
export declare class Dictionary<TKey, TValue> extends Collection<TKey, TValue> implements IDictionary<TKey, TValue>, JSONObjectBase<Record<string, TValue>> {
    /**
     * The actual collection.
     */
    private innerCollection;
    /**
     * Initializes a new instance of the `Dictionary` class.
     */
    constructor();
    /**
     * Initializes a new instance of the `Dictionary` class.
     *
     * @param entries
     * The entries to add.
     */
    constructor(entries: Iterable<readonly [TKey, TValue]> | Dictionary<TKey, TValue>);
    /**
     * @inheritdoc
     */
    get Count(): number;
    /**
     * @inheritdoc
     */
    get Entries(): Array<[TKey, TValue]>;
    /**
     * @inheritdoc
     *
     * @param key
     * The key of the entry to add.
     *
     * @param value
     * The value of the entry to add.
     */
    Add(key: TKey, value: TValue): void;
    /**
     * @inheritdoc
     *
     * @param entries
     * The entries to add.
     */
    AddRange(entries: Iterable<readonly [TKey, TValue]> | Dictionary<TKey, TValue>): void;
    /**
     * @inheritdoc
     *
     * @param key
     * The key of the entry to remove.
     */
    Remove(key: TKey): void;
    /**
     * @inheritdoc
     *
     * @param key
     * The `key` of the entry whose value to get.
     *
     * @returns
     * The value of the entry with the specified `key`.
     */
    Get(key: TKey): TValue;
    /**
     * @inheritdoc
     *
     * @param key
     * The `key` of the entry whose value to set.
     *
     * @param value
     * The value to set for the specified `key`.
     */
    Set(key: TKey, value: TValue): void;
    /**
     * @inheritdoc
     *
     * @param key
     * The `key` of the entry to check.
     *
     * @returns
     * A value indicating whether the dictionary contains an entryx with the specified `key`.
     */
    Has(key: TKey): boolean;
    /**
     * @inheritdoc
     */
    Clear(): void;
    /**
     * @inheritdoc
     *
     * @returns
     * An object representing this collection.
     */
    ToJSON(): Record<string, TValue>;
}
