import { JSONObjectBase } from "../Utilities/JSONObjectBase";
import { Collection } from "./Collection";
import { IList } from "./IList";
/**
 * Provides the functionality to store a list of values.
 */
export declare class List<T> extends Collection<number, T> implements IList<T>, JSONObjectBase<T[]> {
    /**
     * The inner list.
     */
    private innerList;
    /**
     * Initializes a new instance of the `List` class.
     */
    constructor();
    /**
     * Initializes a new instance of the `List` class.
     *
     * @param entries
     * The entries to add.
     */
    constructor(entries: Iterable<T>);
    /**
     * @inheritdoc
     */
    get Count(): number;
    /**
     * @inheritdoc
     */
    get Entries(): Array<[number, T]>;
    /**
     * @inheritdoc
     *
     * @param item
     * The item to check.
     *
     * @returns
     * A value indicating whether the specified `item` exists.
     */
    Contains(item: T): boolean;
    /**
     * @inheritdoc
     *
     * @param item
     * The item to add.
     */
    Add(item: T): void;
    /**
     * @inheritdoc
     *
     * @param items
     * The items to add.
     */
    AddRange(items: readonly T[]): void;
    /**
     * @inheritdoc
     *
     * @param item
     * The item to remove.
     */
    Remove(item: T): void;
    /**
     * @inheritdoc
     *
     * @param index
     * The index of the item to remove.
     */
    RemoveAt(index: number): void;
    /**
     * @inheritdoc
     */
    Clear(): void;
    /**
     * @inheritdoc
     *
     * @returns
     * An object representing this collection.
     */
    ToJSON(): T[];
}
