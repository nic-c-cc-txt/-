"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.List = void 0;
const Collection_1 = require("./Collection");
/**
 * Provides the functionality to store a list of values.
 */
class List extends Collection_1.Collection {
    /**
     * Initializes a new instance of the `List` class.
     *
     * @param entries
     * The entries to add.
     */
    constructor(entries) {
        super();
        /**
         * The inner list.
         */
        this.innerList = [];
        this.innerList.push(...(entries !== null && entries !== void 0 ? entries : []));
    }
    /**
     * @inheritdoc
     */
    get Count() {
        return this.innerList.length;
    }
    /**
     * @inheritdoc
     */
    get Entries() {
        return this.innerList.map((value, index) => {
            return [index, value];
        });
    }
    /**
     * @inheritdoc
     *
     * @param item
     * The item to check.
     *
     * @returns
     * A value indicating whether the specified `item` exists.
     */
    Contains(item) {
        return this.Values.includes(item);
    }
    /**
     * @inheritdoc
     *
     * @param item
     * The item to add.
     */
    Add(item) {
        this.innerList.push(item);
    }
    /**
     * @inheritdoc
     *
     * @param items
     * The items to add.
     */
    AddRange(items) {
        this.innerList.push(...items);
    }
    /**
     * @inheritdoc
     *
     * @param item
     * The item to remove.
     */
    Remove(item) {
        if (this.innerList.includes(item)) {
            this.innerList.splice(this.innerList.indexOf(item), 1);
        }
        else {
            throw new RangeError();
        }
    }
    /**
     * @inheritdoc
     *
     * @param index
     * The index of the item to remove.
     */
    RemoveAt(index) {
        if (this.innerList.length > index) {
            this.innerList.splice(index, 1);
        }
        else {
            throw new RangeError();
        }
    }
    /**
     * @inheritdoc
     */
    Clear() {
        this.innerList.splice(0, this.innerList.length);
    }
    /**
     * @inheritdoc
     *
     * @returns
     * An object representing this collection.
     */
    ToJSON() {
        return Array.from(this.Values);
    }
}
exports.List = List;
//# sourceMappingURL=List.js.map