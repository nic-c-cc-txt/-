"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlphabeticalList = void 0;
const AlphabeticalDictionary_1 = require("./AlphabeticalDictionary");
const List_1 = require("./List");
/**
 * Represents an alphabetical list.
 */
class AlphabeticalList extends List_1.List {
    /**
     * Initializes a new instance of the `AlphabeticalArray` class.
     *
     * @param entries
     * The entries to add.
     */
    constructor(entries) {
        super();
        this.innerCollection = new AlphabeticalDictionary_1.AlphabeticalDictionary(Array.from(entries !== null && entries !== void 0 ? entries : []).map((entry) => [entry, null]));
    }
    /**
     * @inheritdoc
     */
    get Count() {
        return this.innerCollection.Count;
    }
    /**
     * @inheritdoc
     */
    get Entries() {
        return Array.from(this.innerCollection.Entries.map((value, index) => {
            return [index, value[0]];
        }));
    }
    /**
     * @inheritdoc
     *
     * @param value
     * The item to add.
     */
    Add(value) {
        this.innerCollection.Add(value, null);
    }
    /**
     * @inheritdoc
     *
     * @param items
     * The items to add.
     */
    AddRange(items) {
        this.innerCollection.AddRange(items.map((entry) => [entry, null]));
    }
    /**
     * @inheritdoc
     *
     * @param item
     * The item to remove.
     */
    Remove(item) {
        this.innerCollection.Remove(item);
    }
    /**
     * @inheritdoc
     *
     * @param index
     * The index of the item to remove.
     */
    RemoveAt(index) {
        if (this.Count > index) {
            this.Remove(this.Values[index]);
        }
        else {
            throw new RangeError();
        }
    }
    /**
     * @inheritdoc
     */
    Clear() {
        this.innerCollection.Clear();
    }
}
exports.AlphabeticalList = AlphabeticalList;
//# sourceMappingURL=AlphabeticalList.js.map