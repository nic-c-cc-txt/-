"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JSONObject = void 0;
const JSONObjectBase_1 = require("./JSONObjectBase");
/**
 * Represents a json-object.
 */
class JSONObject extends JSONObjectBase_1.JSONObjectBase {
    /**
     * Initializes a new instance of the `JSONObject` class.
     *
     * @param base
     * The base values of the object.
     */
    constructor(base) {
        super();
        /**
         * The internal object.
         */
        this.object = {};
        this.object = Object.assign({}, (base !== null && base !== void 0 ? base : {}));
    }
    /**
     * Adds a property to the object.
     *
     * @param key
     * The key of the property to add.
     *
     * @param value
     * The value of the property to add.
     */
    Add(key, value) {
        this.object[key] = value;
    }
    /**
     * Adds a property to the object if the `value` is not null.
     *
     * @param key
     * The key of the property to add.
     *
     * @param value
     * The value of the property to add.
     */
    AddIfNotNull(key, value) {
        if (value !== null && value !== undefined) {
            this.Add(key, value);
        }
    }
    /**
     * Adds a property to the object if the `value` is not empty.
     *
     * @param key
     * The key of the property to add.
     *
     * @param value
     * The value of the property to add.
     */
    AddIfNotEmpty(key, value) {
        let isEmpty = false;
        switch (typeof value) {
            case "object":
                if (Array.isArray(value)) {
                    isEmpty = value.length === 0;
                }
                else {
                    isEmpty = Object.keys(value !== null && value !== void 0 ? value : {}).length === 0;
                }
                break;
        }
        if (!isEmpty) {
            this.AddIfNotNull(key, value);
        }
    }
    /**
     * Checks whether the object has a property with the specified `key`.
     *
     * @param key
     * The key of the property to check.
     *
     * @returns
     * A value indicating whether the object has a property with the specified `key`.
     */
    Has(key) {
        return key in this.object;
    }
    /**
     * Removes the property with the specified `key` from the object.
     *
     * @param key
     * The key of the property to remove.
     */
    Remove(key) {
        if (this.Has(key)) {
            let result = {};
            for (let ownKey of Object.keys(this.object)) {
                if (ownKey !== key) {
                    result[ownKey] = this.object[ownKey];
                }
            }
            this.object = result;
        }
        else {
            throw new RangeError();
        }
    }
    /**
     * Gets a JSON-object representing this object.
     *
     * @returns
     * A JSON-object representing this object.
     */
    ToJSON() {
        return Object.assign({}, this.object);
    }
}
exports.JSONObject = JSONObject;
//# sourceMappingURL=JSONObject.js.map