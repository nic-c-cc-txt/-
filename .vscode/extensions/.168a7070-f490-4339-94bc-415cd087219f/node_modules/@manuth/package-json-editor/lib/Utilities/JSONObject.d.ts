import { JSONObjectBase } from "./JSONObjectBase";
/**
 * Represents a json-object.
 */
export declare class JSONObject<T extends Record<never, never> = Record<string, unknown>> extends JSONObjectBase<Partial<T>> {
    /**
     * The internal object.
     */
    private object;
    /**
     * Initializes a new instance of the `JSONObject` class.
     */
    constructor();
    /**
     * Initializes a new instance of the `JSONObject` class.
     *
     * @param base
     * The base values of the object.
     */
    constructor(base: Partial<T>);
    /**
     * Adds a property to the object.
     *
     * @param key
     * The key of the property to add.
     *
     * @param value
     * The value of the property to add.
     */
    Add<TKey extends keyof T>(key: TKey, value: T[TKey]): void;
    /**
     * Adds a property to the object if the `value` is not null.
     *
     * @param key
     * The key of the property to add.
     *
     * @param value
     * The value of the property to add.
     */
    AddIfNotNull<TKey extends keyof T>(key: TKey, value: T[TKey]): void;
    /**
     * Adds a property to the object if the `value` is not empty.
     *
     * @param key
     * The key of the property to add.
     *
     * @param value
     * The value of the property to add.
     */
    AddIfNotEmpty<TKey extends keyof T>(key: TKey, value: T[TKey]): void;
    /**
     * Checks whether the object has a property with the specified `key`.
     *
     * @param key
     * The key of the property to check.
     *
     * @returns
     * A value indicating whether the object has a property with the specified `key`.
     */
    Has(key: keyof T): boolean;
    /**
     * Removes the property with the specified `key` from the object.
     *
     * @param key
     * The key of the property to remove.
     */
    Remove(key: keyof T): void;
    /**
     * Gets a JSON-object representing this object.
     *
     * @returns
     * A JSON-object representing this object.
     */
    ToJSON(): Partial<T>;
}
