"use strict";
const Constants_1 = require("./Constants");
const ConfigNotFoundMessage_1 = require("./Diagnostics/ConfigNotFoundMessage");
const DeprecationMessage_1 = require("./Diagnostics/DeprecationMessage");
const Diagnostic_1 = require("./Diagnostics/Diagnostic");
const DiagnosticIDDecorator_1 = require("./Diagnostics/DiagnosticIDDecorator");
const DiagnosticMessage_1 = require("./Diagnostics/DiagnosticMessage");
const ESLintDiagnostic_1 = require("./Diagnostics/ESLintDiagnostic");
const ESLintNotInstalledMessage_1 = require("./Diagnostics/ESLintNotInstalledMessage");
const LogLevel_1 = require("./Logging/LogLevel");
const ModuleInitializer_1 = require("./ModuleInitializer");
const Plugin_1 = require("./Plugin");
const PluginModule_1 = require("./PluginModule");
const PackageManager_1 = require("./Settings/PackageManager");
/**
 * The module-initializer.
 */
let initializer = new ModuleInitializer_1.ModuleInitializer();
/**
 * Initializes the module.
 *
 * @param options
 * The options for the plugin.
 *
 * @returns
 * The typescript-plugin.
 */
function initializeModule(options) {
    return initializer.Initialize(options);
}
// eslint-disable-next-line @typescript-eslint/no-namespace
(function (initializeModule) {
    /**
     * Provides constants for the plugin.
     */
    initializeModule.Constants = Constants_1.Constants;
    /**
     * Represents a message for a missing configuration.
     */
    initializeModule.ConfigNotFoundMessage = ConfigNotFoundMessage_1.ConfigNotFoundMessage;
    /**
     * Represents a message about a deprecated rule.
     */
    initializeModule.DeprecationMessage = DeprecationMessage_1.DeprecationMessage;
    /**
     * Represents a diagnostic.
     */
    initializeModule.Diagnostic = Diagnostic_1.Diagnostic;
    /**
     * Provides the functionality to decorate fix-ids.
     */
    initializeModule.DiagnosticIDDecorator = DiagnosticIDDecorator_1.DiagnosticIDDecorator;
    /**
     * Represents a diagnostic-message.
     */
    initializeModule.DiagnosticMessage = DiagnosticMessage_1.DiagnosticMessage;
    /**
     * Represents a diagnostic which provides information about an `eslint` failure.
     */
    initializeModule.ESLintDiagnostic = ESLintDiagnostic_1.ESLintDiagnostic;
    /**
     * Represents a message for installing `eslint`.
     */
    initializeModule.ESLintNotInstalledMessage = ESLintNotInstalledMessage_1.ESLintNotInstalledMessage;
    /**
     * Represents a log-level.
     */
    initializeModule.LogLevel = LogLevel_1.LogLevel;
    /**
     * Provides the functionality to initialize new `PluginModule`s.
     */
    initializeModule.ModuleInitializer = ModuleInitializer_1.ModuleInitializer;
    /**
     * Represents a service for handling `eslint`-warnings.
     */
    initializeModule.Plugin = Plugin_1.Plugin;
    /**
     * Represents the plugin-module.
     */
    initializeModule.PluginModule = PluginModule_1.PluginModule;
    /**
     * Represents a package-manager.
     */
    initializeModule.PackageManager = PackageManager_1.PackageManager;
})(initializeModule || (initializeModule = {}));
module.exports = initializeModule;
//# sourceMappingURL=index.js.map