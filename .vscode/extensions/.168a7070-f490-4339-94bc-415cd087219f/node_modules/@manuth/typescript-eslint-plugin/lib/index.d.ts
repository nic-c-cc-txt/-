import { server } from "typescript/lib/tsserverlibrary";
import { Constants as _Constants } from "./Constants";
import { ConfigNotFoundMessage as _ConfigNotFoundMessage } from "./Diagnostics/ConfigNotFoundMessage";
import { DeprecationMessage as _DeprecationMessage } from "./Diagnostics/DeprecationMessage";
import { Diagnostic as _Diagnostic } from "./Diagnostics/Diagnostic";
import { DiagnosticIDDecorator as _DiagnosticIDDecorator } from "./Diagnostics/DiagnosticIDDecorator";
import { DiagnosticMessage as _DiagnosticMessage } from "./Diagnostics/DiagnosticMessage";
import { ESLintDiagnostic as _ESLintDiagnostic } from "./Diagnostics/ESLintDiagnostic";
import { ESLintNotInstalledMessage as _ESLintNotInstalledMessage } from "./Diagnostics/ESLintNotInstalledMessage";
import { IDiagnostic as _IDiagnostic } from "./Diagnostics/IDiagnostic";
import { IMockedLanguageService as _IMockedLanguageService } from "./Diagnostics/IMockedLanguageService";
import { IParsedDiagnostic as _IParsedDiagnostic } from "./Diagnostics/IParsedDiagnostic";
import { IInitializationOptions as _IInitializationOptions } from "./IInitializationOptions";
import { LogLevel as _LogLevel } from "./Logging/LogLevel";
import { ModuleInitializer as _ModuleInitializer } from "./ModuleInitializer";
import { Plugin as _Plugin } from "./Plugin";
import { PluginModule as _PluginModule } from "./PluginModule";
import { ITSConfiguration as _ITSConfiguration } from "./Settings/ITSConfiguration";
import { PackageManager as _PackageManager } from "./Settings/PackageManager";
/**
 * Initializes the module.
 *
 * @param options
 * The options for the plugin.
 *
 * @returns
 * The typescript-plugin.
 */
declare function initializeModule(options: _IInitializationOptions): server.PluginModule;
declare namespace initializeModule {
    /**
     * Provides constants for the plugin.
     */
    let Constants: typeof _Constants;
    /**
     * Represents a message for a missing configuration.
     */
    let ConfigNotFoundMessage: typeof _ConfigNotFoundMessage;
    /**
     * Represents a message about a deprecated rule.
     */
    let DeprecationMessage: typeof _DeprecationMessage;
    /**
     * Represents a diagnostic.
     */
    let Diagnostic: typeof _Diagnostic;
    /**
     * Provides the functionality to decorate fix-ids.
     */
    let DiagnosticIDDecorator: typeof _DiagnosticIDDecorator;
    /**
     * Represents a diagnostic-message.
     */
    let DiagnosticMessage: typeof _DiagnosticMessage;
    /**
     * Represents a diagnostic which provides information about an `eslint` failure.
     */
    let ESLintDiagnostic: typeof _ESLintDiagnostic;
    /**
     * Represents a message for installing `eslint`.
     */
    let ESLintNotInstalledMessage: typeof _ESLintNotInstalledMessage;
    /**
     * Represents a diagnostic.
     */
    type IDiagnostic = _IDiagnostic;
    /**
     * Represents a language service with the mock installed.
     */
    type IMockedLanguageService = _IMockedLanguageService;
    /**
     * Represents a parsed diagnostic.
     */
    type IParsedDiagnostic<T extends IDiagnostic> = _IParsedDiagnostic<T>;
    /**
     * Provides options for initialilzing this plugin.
     */
    type IInitializationOptions = _IInitializationOptions;
    /**
     * Represents a log-level.
     */
    let LogLevel: typeof _LogLevel;
    /**
     * Provides the functionality to initialize new `PluginModule`s.
     */
    let ModuleInitializer: typeof _ModuleInitializer;
    /**
     * Represents a service for handling `eslint`-warnings.
     */
    let Plugin: typeof _Plugin;
    /**
     * Represents the plugin-module.
     */
    let PluginModule: typeof _PluginModule;
    /**
     * Represents the plugin section in the `tsconfig.json` file.
     */
    type ITSConfiguration = _ITSConfiguration;
    /**
     * Represents a package-manager.
     */
    let PackageManager: typeof _PackageManager;
}
/**
 * Initializes the module.
 *
 * @param options
 * The options for the plugin.
 *
 * @returns
 * The typescript-plugin.
 */
export = initializeModule;
