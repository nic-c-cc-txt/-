import ts = require("typescript/lib/tsserverlibrary");
import { Range } from "vscode-languageserver";
import { Plugin } from "../Plugin";
import { Configuration } from "../Settings/Configuration";
import { IDiagnostic } from "./IDiagnostic";
import { IParsedDiagnostic } from "./IParsedDiagnostic";
/**
 * Represents a diagnostic.
 */
export declare abstract class Diagnostic implements IDiagnostic {
    /**
     * Gets the information related to the diagnostic.
     */
    RelatedInformation?: ts.DiagnosticRelatedInformation[];
    /**
     * The plugin of the diagnostic.
     */
    private plugin;
    /**
     * The category of the diagnostic.
     */
    private category;
    /**
     * The source-file.
     */
    private file;
    /**
     * Initializes a new instance of the `Diagnostic` class.
     *
     * @param plugin
     * The plugin of the diagnostic.
     *
     * @param file
     * The file of the diagnostic.
     *
     * @param category
     * The category of the diagnostic.
     */
    constructor(plugin: Plugin, file: ts.SourceFile, category?: ts.DiagnosticCategory);
    /**
     * Gets the plugin of the diagnostic.
     */
    get Plugin(): Plugin;
    /**
     * Gets the typescript server.
     */
    get TypeScript(): typeof ts;
    /**
     * Gets the configuration of the plugin.
     */
    get Config(): Configuration;
    /**
     * Gets the source of the diagnostic.
     */
    get Source(): string;
    /**
     * Gets the code of the error.
     */
    get Code(): number;
    /**
     * Gets the category of the diagnostic.
     */
    get Category(): ts.DiagnosticCategory;
    /**
     * Gets the source-file.
     */
    get File(): ts.SourceFile;
    /**
     * Gets the range containing the error.
     */
    get Range(): Range;
    /**
     * Gets the message of the diagnostic.
     */
    abstract get Message(): string | ts.DiagnosticMessageChain;
    /**
     * Gets the parsed representation of the diagnostic.
     */
    get Parsed(): IParsedDiagnostic<this>;
    /**
     * Resolves the position of a line- and column-number.
     *
     * @param line
     * The line to resolve.
     *
     * @param column
     * The column to resolve.
     *
     * @returns
     * A number representing the text-position.
     */
    protected ResolvePosition(line: number, column: number): number;
}
