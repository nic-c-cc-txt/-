"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeprecationMessage = void 0;
const Diagnostic_1 = require("./Diagnostic");
/**
 * Represents a message about a deprecated rule.
 */
class DeprecationMessage extends Diagnostic_1.Diagnostic {
    /**
     * Initializes a new instance of the `DeprecationMessage` class.
     *
     * @param plugin
     * The plugin of the diagnostic.
     *
     * @param file
     * The file of the diagnostic.
     *
     * @param deprecatedRuleUse
     * The deprecated rule that has been used.
     *
     * @param category
     * The category of the diagnostic.
     */
    // eslint-disable-next-line deprecation/deprecation
    constructor(plugin, file, deprecatedRuleUse, category) {
        super(plugin, file, category);
        this.deprecatedRuleUse = deprecatedRuleUse;
    }
    /**
     * Gets the deprecated rule that has been used.
     */
    // eslint-disable-next-line deprecation/deprecation
    get DeprecatedRuleUse() {
        return this.deprecatedRuleUse;
    }
    /**
     * @inheritdoc
     */
    get Message() {
        let result = `The rule \`${this.deprecatedRuleUse.ruleId}\` is deprecated.\nPlease use `;
        let replacements = this.deprecatedRuleUse.replacedBy.map((replacement) => `\`${replacement}\``);
        if (replacements.length > 1) {
            result += "these alternatives:\n";
            result += replacements.slice(0, replacements.length - 1).join(", ");
            result += ` and ${replacements[replacements.length - 1]}`;
        }
        else {
            result += `${replacements[0]} instead.`;
        }
        return result;
    }
}
exports.DeprecationMessage = DeprecationMessage;
//# sourceMappingURL=DeprecationMessage.js.map