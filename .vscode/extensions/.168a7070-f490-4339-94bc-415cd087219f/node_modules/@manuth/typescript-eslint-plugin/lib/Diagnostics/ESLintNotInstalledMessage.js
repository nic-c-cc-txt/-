"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ESLintNotInstalledMessage = void 0;
const PackageManager_1 = require("../Settings/PackageManager");
const Diagnostic_1 = require("./Diagnostic");
/**
 * Represents a message for installing `eslint`.
 */
class ESLintNotInstalledMessage extends Diagnostic_1.Diagnostic {
    /**
     * Initializes a new instance of the `ESLintNotInstalledMessage` class.
     *
     * @param plugin
     * The plugin of the diagnostic.
     *
     * @param file
     * The file of the diagnostic.
     *
     * @param category
     * The category of the message.
     */
    constructor(plugin, file, category) {
        super(plugin, file, category);
    }
    /**
     * Gets the name of the package to install.
     */
    static get PackageName() {
        return this.packageName;
    }
    /**
     * Gets the commands for installing the linter locally.
     */
    static get LocalCommands() {
        if (this.localCommands === null) {
            this.localCommands = {
                [PackageManager_1.PackageManager.NPM]: `npm install ${this.PackageName}`,
                [PackageManager_1.PackageManager.PNPM]: `pnpm install ${this.PackageName}`,
                [PackageManager_1.PackageManager.Yarn]: `yarn add ${this.PackageName}`
            };
        }
        return this.localCommands;
    }
    /**
     * Gets the commands for installing the linter globally.
     */
    static get GlobalCommands() {
        if (this.globalCommands === null) {
            this.globalCommands = {
                [PackageManager_1.PackageManager.NPM]: `npm install -g ${this.PackageName}`,
                [PackageManager_1.PackageManager.PNPM]: `pnpm install -g ${this.PackageName}`,
                [PackageManager_1.PackageManager.Yarn]: `yarn global add ${this.PackageName}`
            };
        }
        return this.globalCommands;
    }
    /**
     * @inheritdoc
     */
    get Message() {
        return [
            `Failed to load the ESLint library for '${this.File.fileName}'`,
            "To use ESLint please install the eslint-module " +
                `using '${ESLintNotInstalledMessage.LocalCommands[this.Config.PackageManager]}' or` +
                `using '${ESLintNotInstalledMessage.GlobalCommands[this.Config.PackageManager]}' to install it globally.`,
            "Be sure to restart your editor after the installation."
        ].join("\n");
    }
}
exports.ESLintNotInstalledMessage = ESLintNotInstalledMessage;
/**
 * The name of the package to install.
 */
ESLintNotInstalledMessage.packageName = "eslint";
/**
 * The commands for installing the linter locally.
 */
ESLintNotInstalledMessage.localCommands = null;
/**
 * The commands for installing the linter globally.
 */
ESLintNotInstalledMessage.globalCommands = null;
//# sourceMappingURL=ESLintNotInstalledMessage.js.map